package de.bestblu.test;

import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Date;

import javax.imageio.ImageIO;

import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.GVTTreeWalker;
import org.apache.batik.gvt.GraphicsNode;
import org.apache.batik.svggen.SVGGraphics2D;
import org.jfree.chart.JFreeChart;
import org.w3c.dom.DOMImplementation;

import com.lowagie.text.Anchor;
import com.lowagie.text.BadElementException;
import com.lowagie.text.Chapter;
import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.Image;
import com.lowagie.text.List;
import com.lowagie.text.ListItem;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Section;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfGraphics2D;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfTemplate;
import com.lowagie.text.pdf.PdfWriter;

public class PdfVectorImage {

	private static String FILE = "D:/lager/itext_vector.pdf";
	private static String SVG_FILE = "D:/lager/export.svg";
	
	private static Font catFont = new Font(Font.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.TIMES_ROMAN, 12,
			Font.NORMAL);
	private static Font subFont = new Font(Font.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.TIMES_ROMAN, 12,
			Font.BOLD);
	
	private PdfWriter writer;
	
	public PdfVectorImage() {}
	
	public static void main(String[] args) {
		PdfVectorImage pvi =  new PdfVectorImage();
//		pvi.exportPDF();
		pvi.exportJFreeChartToSVG();
	}
	
	
	private void exportPDF() {
		try {
			Document document = new Document();
			this.writer = PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addMetaData(document);
			addTitlePage(document);
			addContent(document);
			
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	private void exportJFreeChartToSVG() {
		DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();
		org.w3c.dom.Document document = domImpl.createDocument(null, "svg", null);
		SVGGraphics2D svgGenerator = new SVGGraphics2D(document);
		JFreeChart chart = new Chart().getChart();
		chart.draw(svgGenerator, new Rectangle2D.Float(0.0f, 0.0f, 300f, 300f));
		
		File outputFile = new File(SVG_FILE);
		try {
			java.io.OutputStream outputStream = new FileOutputStream(outputFile);
			Writer out = new OutputStreamWriter(outputStream, "UTF-8");
			svgGenerator.stream(out, true);
			outputStream.flush();
			outputStream.close();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	private static void addMetaData(Document doc) {
		doc.addTitle("iText with Vector Graphgics");
		doc.addSubject("Java 2D");
		doc.addKeywords("Java, PDF, iText, Java2D");
		doc.addAuthor("Best Blu");
		doc.addCreator("Dong Wang");
	}
	
	private void addTitlePage(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Title of the document", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph("This document describes something which is very important ",
				smallBold));

		addEmptyLine(preface, 8);
		
		// add Graphic
		JFreeChart jfChart = new Chart().getChart();
		
		
		//Image pieChart = getVectorImageFromJFreeChart(jfChart, 300, 200);
//		preface.add(new Chunk(pieChart, 0, 0));
		Image img = getSvgImage(getSvgIcon(), 200, 200);
		preface.add(new Chunk(img, 0, 0));
		

		document.add(preface);
		// Start a new page
		document.newPage();
	}
	
	private void addContent(Document document) throws DocumentException {
		Anchor anchor = new Anchor("First Chapter", catFont);
		anchor.setName("First Chapter");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		Paragraph subPara = new Paragraph("Subcategory 1", subFont);
		Section subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Hello"));

		subPara = new Paragraph("Subcategory 2", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Paragraph 1"));
		subCatPart.add(new Paragraph("Paragraph 2"));
		subCatPart.add(new Paragraph("Paragraph 3"));

		// add a list
		createList(subCatPart);
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 5);
		subCatPart.add(paragraph);

		// add a table
		createTable(subCatPart);

		// now add all this to the document
		document.add(catPart);

		// Next section
		anchor = new Anchor("Second Chapter", catFont);
		anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);

		subPara = new Paragraph("Subcategory", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("This is a very important message"));

		// now add all this to the document
		document.add(catPart);

	}
	
	private void createTable(Section subCatPart) throws BadElementException {
		PdfPTable table = new PdfPTable(3);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 2"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 3"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);

		table.addCell("1.0");
		table.addCell("1.1");
		table.addCell("1.2");
		table.addCell("2.1");
		table.addCell("2.2");
		table.addCell("2.3");

		subCatPart.add(table);

	}

	private void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}
	
	
	private void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
	
    private Image getVectorImageFromJFreeChart(JFreeChart chart, int width, int height) {
        try {
            final PdfTemplate chartTemplate = this.writer.getDirectContent().createTemplate(width, height);
            final Graphics2D g2 = chartTemplate.createGraphics(width, height);
            chart.draw(g2, new Rectangle2D.Double(5, 5, width - 10, height - 10));
            g2.dispose();

            Image image = null;
            image = Image.getInstance(chartTemplate);
            return image;
        } catch (Exception e) {
            return null;
        }
    }

    private Image getSvgImage(GraphicsNode svgImg, int x, int y) {
    	CanvasGraphicsNode canvasGraphicsNode = (CanvasGraphicsNode) svgImg.getRoot().getChildren().get(0);
    	Rectangle2D bounds = canvasGraphicsNode.getSensitiveBounds();
    	GVTTreeWalker treeWalker = new GVTTreeWalker(svgImg);
    	GraphicsNode currNode;
    	
    	// scale
//    	AffineTransform transform = new AffineTransform(1.0, 1.0, 1.0, 0.9, x, y);
    	svgImg.setTransform(AffineTransform.getScaleInstance(0.3, 0.3));
    	
//    	while((currNode = treeWalker.nextGraphicsNode()) != null){
//    		currNode.setClip(null);
//    	}
/*    	BufferedImage bufferedImage = new BufferedImage((int) bounds.getWidth(), (int) bounds.getHeight(), BufferedImage.TYPE_INT_RGB);
    	Graphics2D g2d = (Graphics2D) bufferedImage.getGraphics();
    	svgImg.paint(g2d);
    	
    	g2d.dispose();

    	try {
			ImageIO.write(bufferedImage, "png", new File("baskit.png"));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
    	*/
    	PdfTemplate pdfTemplate = this.writer.getDirectContent().createTemplate((float) x, (float)y);
    	Graphics2D g2 = pdfTemplate.createGraphics((float) x, (float)y);
    	svgImg.paint(g2);
    	g2.dispose();
    	Image image = null;
    	try {
			image = Image.getInstance(pdfTemplate);
			return image;
		} catch (BadElementException e) {
			e.printStackTrace();
			return null;
		}
    }
    
    public static org.apache.batik.gvt.GraphicsNode getSvgIcon() {
        org.apache.batik.gvt.GraphicsNode svgIcon = null;
        try {
//        	java.net.URL localFile = new java.net.URL("file:///D:/lager/Messlandkarte/basket.svg");
        	File file = new File("D:\\lager\\Messlandkarte\\Ubuntu.svg");
//        	File file = new File(PdfVectorImage.class.getResource("basket.svg").getFile());
             String xmlParser = org.apache.batik.util.XMLResourceDescriptor.getXMLParserClassName();
             org.apache.batik.dom.svg.SAXSVGDocumentFactory df = new org.apache.batik.dom.svg.SAXSVGDocumentFactory(xmlParser);
             org.w3c.dom.svg.SVGDocument doc = df.createSVGDocument(file.toURL().toString());
             org.apache.batik.bridge.UserAgent userAgent = new org.apache.batik.bridge.UserAgentAdapter();
             org.apache.batik.bridge.DocumentLoader loader = new org.apache.batik.bridge.DocumentLoader(userAgent);
             org.apache.batik.bridge.BridgeContext ctx = new org.apache.batik.bridge.BridgeContext(userAgent, loader);
             ctx.setDynamicState(org.apache.batik.bridge.BridgeContext.DYNAMIC);
             org.apache.batik.bridge.GVTBuilder builder = new org.apache.batik.bridge.GVTBuilder();
             svgIcon = builder.build(ctx, doc);
        } catch (Exception excp) {
             svgIcon = null;
             excp.printStackTrace();
        }
        return svgIcon;
   }
    
    
	
}
